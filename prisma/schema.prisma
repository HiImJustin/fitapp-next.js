// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  admin         Boolean?  @default(false)
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  userDetails   UserDetails[]
  activityLog   activityLog[]
  accounts      Account[]
  sessions      Session[]
  @@map(name: "users")
}

model UserDetails {
  id        String    @default(cuid()) @id
  name      String
  age       Int
  height    Int
  weight    Int
  gender    String
  tdee      Int
  bmr       Int
  activity  String
  user      User? @relation(fields: [userEmail], references: [email])
  userEmail String?
  customMeals   customMeals[]
  exercises     exercises[]
}

model Food {
  id  Int @default(autoincrement()) @id
  foodName  String
  calPer100 Int
  protien Int
  carbs Int
  fat Int
}

model customMeals {
  id Int @default(autoincrement()) @id
  mealName String
  calPer100 Int
  protien Int?
  carbs Int?
  fat Int?
  user UserDetails? @relation(fields: [userID], references: [id])
  userID String
}

model exercises {
  id Int @default(autoincrement()) @id
  exerciseName String
  avgCalBurned Int?
  user UserDetails? @relation(fields: [userID], references: [id])
  userID String
}

model customRoutine {
  id Int @default(autoincrement()) @id
  routineName String
  exercises String
}

model userDiet {
  id Int @default(autoincrement()) @id
  foodLogged String
  calories Int
  protien Int?
  carbs Int?
  fat Int?
  dateAdded DateTime @default(now())
}

model activityLog {
  id Int @default(autoincrement()) @id
  user String
  action String
  ip String
  timeStamp DateTime @default(now())
  userEmail User? @relation(fields: [user], references: [email])
}



model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}